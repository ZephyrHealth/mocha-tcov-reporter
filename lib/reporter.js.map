{"version":3,"sources":["reporter.coffee"],"names":[],"mappings":"AAAA,IAAA,oCAAA;EAAA;iSAAA;;AAAA,IAAA,GAAO,OAAA,CAAQ,MAAR,CAAP,CAAA;;AAAA,IACA,GAAO,OAAA,CAAQ,OAAR,CAAgB,CAAC,SAAS,CAAC,IADlC,CAAA;;AAAA;AAIE,iCAAA,CAAA;;AAAa,EAAA,sBAAC,MAAD,GAAA;AACX,IAAA,MAAM,CAAC,EAAP,CAAU,KAAV,EAAiB,IAAC,CAAA,GAAG,CAAC,IAAL,CAAU,IAAV,CAAjB,CAAA,CADW;EAAA,CAAb;;AAAA,yBAGA,GAAA,GAAK,SAAA,GAAA;AACH,QAAA,qCAAA;AAAA,IAAA,OAAA,GAAU,EAAV,CAAA;AAAA,IACA,SAAA,GAAY,MAAM,CAAC,YAAP,IAAuB,EADnC,CAAA;AAGA,SAAA,iBAAA;oCAAA;AACE,MAAA,OAAO,CAAC,IAAR,CAAiB,IAAA,UAAA,CAAW,IAAX,EAAiB,WAAjB,CAAjB,CAAA,CADF;AAAA,KAHA;AAAA,IAMA,OAAO,CAAC,OAAR,CAAgB,SAAC,MAAD,GAAA;aACd,IAAI,CAAC,GAAL,CAAS,MAAM,CAAC,eAAP,CAAA,CAAT,EADc;IAAA,CAAhB,CANA,CAAA;WASA,IAAC,CAAA,OAAD,GAAW,QAVR;EAAA,CAHL,CAAA;;AAAA,yBAeA,UAAA,GAAY,SAAA,GAAA;WACV,IAAC,CAAA,QADS;EAAA,CAfZ,CAAA;;sBAAA;;GADyB,KAH3B,CAAA;;AAAA;AAuBe,EAAA,oBAAC,IAAD,EAAO,OAAP,GAAA;AACX,IAAA,IAAC,CAAA,IAAD,GAAQ,IAAR,CAAA;AAAA,IACA,IAAC,CAAA,SAAD,CAAW,OAAX,CADA,CADW;EAAA,CAAb;;AAAA,uBAIA,SAAA,GAAW,SAAC,OAAD,GAAA;AACT,QAAA,mCAAA;AAAA,IAAA,UAAA,GAAa,CAAb,CAAA;AAAA,IACA,KAAA,GAAQ,CADR,CAAA;AAAA,IAEA,MAAA,GAAS,CAFT,CAAA;AAAA,IAGA,QAAA,GAAW,CAHX,CAAA;AAAA,IAKA,OAAO,CAAC,OAAR,CAAgB,SAAC,MAAD,GAAA;AACd,MAAA,UAAA,EAAA,CAAA;AACA,MAAA,IAAG,MAAA,KAAU,CAAb;AACE,QAAA,MAAA,EAAA,CAAA;eACA,KAAA,GAFF;OAAA,MAGK,IAAG,MAAA,KAAU,MAAb;AACH,QAAA,QAAA,EAAA,CAAA;eACA,KAAA,GAFG;OALS;IAAA,CAAhB,CALA,CAAA;AAAA,IAcA,IAAC,CAAA,MAAD,GAAU,MAdV,CAAA;AAAA,IAeA,IAAC,CAAA,QAAD,GAAY,QAfZ,CAAA;WAgBA,IAAC,CAAA,KAAD,GAAS,MAjBA;EAAA,CAJX,CAAA;;AAAA,uBAuBA,eAAA,GAAiB,SAAA,GAAA;WACf,IAAC,CAAA,QAAD,GAAY,IAAC,CAAA,KAAb,GAAqB,IADN;EAAA,CAvBjB,CAAA;;oBAAA;;IAvBF,CAAA;;AAAA,MAiDM,CAAC,OAAP,GAAiB,YAjDjB,CAAA","file":"reporter.js","sourceRoot":"/source/","sourcesContent":["util = require 'util'\nBase = require('mocha').reporters.Base\n\nclass TextReporter extends Base\n  constructor: (runner) ->\n    runner.on 'end', @end.bind @\n\n  end: ->\n    results = []\n    coverages = global._$jscoverage || {}\n\n    for file, lineResults of coverages\n      results.push new FileResult(file, lineResults)\n\n    results.forEach (result) ->\n      util.log result.getCodeCoverage()\n\n    @results = results\n\n  getResults: () ->\n    @results\n\nclass FileResult\n  constructor: (name, results) ->\n    @name = name\n    @calculate(results)\n\n  calculate: (results) ->\n    lineNumber = 0\n    total = 0\n    unused = 0\n    executed = 0\n\n    results.forEach (result) ->\n      lineNumber++\n      if result == 0\n        unused++\n        total++\n      else if result != undefined\n        executed++\n        total++\n\n    @unused = unused\n    @executed = executed\n    @total = total\n\n  getCodeCoverage: ->\n    @executed / @total * 100\n\nmodule.exports = TextReporter\n"]}