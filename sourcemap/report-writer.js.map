{"version":3,"sources":["report-writer.coffee"],"names":[],"mappings":"AAAA,IAAA,4CAAA;EAAA;;AAAA,IAAA,GAAO,OAAA,CAAQ,MAAR;;AACP,KAAA,GAAQ,OAAA,CAAQ,OAAR,CAAgB,CAAC,SAAS,CAAC,IAAI,CAAC;;AACxC,MAAA,GAAS,OAAA,CAAQ,IAAR;;AACT,MAAA,GAAS,OAAA,CAAQ,kBAAR;;AACT,CAAA,GAAI,OAAA,CAAQ,eAAR;;AAEE;yBAEJ,cAAA,GAAgB;IACd,QAAA,EAAU,IADI;IAEd,YAAA,EAAc,IAFA;;;EAKH,sBAAC,OAAD;IACX,IAAC,CAAA,YAAD,CAAc,OAAd;EADW;;yBAGb,YAAA,GAAc,SAAC,OAAD;IACZ,IAAC,CAAA,OAAD,GAAW,CAAC,CAAC,KAAF,CAAQ,EAAR,EAAY,IAAC,CAAA,cAAb,EAA6B,OAA7B;IACX,IAAC,CAAA,OAAO,CAAC,QAAT,GAAoB,UAAA,CAAW,IAAC,CAAA,OAAO,CAAC,QAApB;WACpB,IAAC,CAAA,OAAO,CAAC,YAAT,GAAwB,UAAA,CAAW,IAAC,CAAA,OAAO,CAAC,YAApB;EAHZ;;yBAKd,WAAA,GAAa,SAAC,MAAD;AACX,QAAA;IAAA,OAAA,GAAU;IACV,MAAM,CAAC,OAAP,CAAe,OAAf;IACA,MAAM,CAAC,OAAP,CAAe,4BAAf;IACA,MAAM,CAAC,KAAK,CAAC,OAAb,CAAqB,IAAC,CAAA,gBAAtB,EAAwC,IAAxC;IAEA,QAAA,GAAW,IAAC,CAAA,QAAD,CAAU,MAAM,CAAC,QAAjB;IAEX,MAAM,CAAC,QAAP,CAAA;IACA,MAAM,CAAC,OAAP,CAAe,oBAAA,GAAuB,QAAtC;IACA,MAAM,CAAC,OAAP,CAAe,OAAf;WACA,MAAM,CAAC,QAAP,CAAA;EAXW;;yBAab,gBAAA,GAAkB,SAAC,IAAD;AAChB,QAAA;IAAA,QAAA,GAAW,IAAC,CAAA,QAAD,CAAU,IAAI,CAAC,QAAf;WACX,IAAC,CAAA,eAAD,CAAiB,QAAjB,EAA2B,IAAI,CAAC,QAAhC,EAA0C,IAAI,CAAC,KAA/C,EAAsD,IAAI,CAAC,QAAL,CAAc,OAAO,CAAC,GAAR,CAAA,CAAd,EAA6B,IAAI,CAAC,QAAlC,CAAtD;EAFgB;;yBAIlB,QAAA,GAAU,SAAC,QAAD;AACR,QAAA;IAAA,OAAA,GAAU,MAAA,CAAO,QAAP,EAAiB,CAAC,QAAD,CAAjB;IAEV,IAAG,QAAA,IAAY,IAAC,CAAA,OAAO,CAAC,YAAxB;aACE,KAAA,CAAM,OAAN,EAAe,OAAf,EADF;KAAA,MAEK,IAAG,QAAA,GAAW,IAAC,CAAA,OAAO,CAAC,QAAvB;aACH,KAAA,CAAM,MAAN,EAAc,OAAd,EADG;KAAA,MAAA;aAGH,KAAA,CAAM,eAAN,EAAuB,OAAvB,EAHG;;EALG;;yBAUV,eAAA,GAAiB,SAAA;AACf,QAAA;IADgB;IAChB,KAAA,GAAQ,MAAA,CAAO,SAAP,EAAkB,MAAO,CAAA,CAAA,CAAzB,EAA6B,MAAO,CAAA,CAAA,CAApC;IACR,MAAA,GAAS;IACT,MAAA,GAAS,MAAA,CAAO,eAAP,EAAwB,MAAO,CAAA,CAAA,CAA/B,EAAmC,CAAC,MAAA,GAAS,KAAV,CAAgB,CAAC,KAAjB,CAAuB,CAAC,MAAM,CAAC,MAA/B,CAAnC,EAA2E,MAAO,CAAA,CAAA,CAAlF;WACT,MAAM,CAAC,OAAP,CAAe,MAAf;EAJe;;;;;;AAMnB,MAAM,CAAC,OAAP,GAAiB","file":"report-writer.js","sourceRoot":"/source/","sourcesContent":["path = require('path');\ncolor = require('mocha').reporters.Base.color\nformat = require('sf')\nwriter = require('./console-writer')\n_ = require('lodash/object')\n\nclass ReportWriter\n\n  defaultOptions: {\n    critical: 30.0,\n    satisfactory: 70.0\n  }\n\n  constructor: (options) ->\n    @mergeOptions(options)\n\n  mergeOptions: (options) ->\n    @options = _.merge({}, @defaultOptions, options)\n    @options.critical = parseFloat(@options.critical)\n    @options.satisfactory = parseFloat(@options.satisfactory)\n\n  writeReport: (result) ->\n    divider = \"--------------------------------------------------------------------------------\"\n    writer.writeln divider\n    writer.writeln \"  Code Coverage Results:\\n\"\n    result.files.forEach @formatFileResult, @\n\n    coverage = @colorize(result.coverage)\n\n    writer.writeEOL()\n    writer.writeln \"  Total Coverage: \" + coverage\n    writer.writeln divider\n    writer.writeEOL()\n\n  formatFileResult: (file) ->\n    coverage = @colorize(file.coverage)\n    @writeFileResult coverage, file.executed, file.total, path.relative(process.cwd(), file.fileName)\n\n  colorize: (coverage) ->\n    percent = format '  {0}%', [coverage]\n\n    if coverage >= @options.satisfactory\n      color('green', percent)\n    else if coverage < @options.critical\n      color('fail', percent)\n    else\n      color('bright yellow', percent)\n\n  writeFileResult: (values...) ->\n    ratio = format '{0}/{1}', values[1], values[2]\n    indent = '          '\n    output = format '  {0} {1} {2}', values[0], (indent + ratio).slice(-indent.length), values[3]\n    writer.writeln output\n\nmodule.exports = ReportWriter\n"]}